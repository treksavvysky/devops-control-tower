[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "devops-control-tower"
version = "0.1.0"
description = "Centralized command center for AI-powered development operations"
readme = "README.md"
license = "MIT"
authors = ["George Loudon <george@example.com>"]
keywords = ["devops", "ai", "orchestration", "automation", "infrastructure"]
packages = [{ include = "devops_control_tower" }]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.109"
uvicorn = {version = "^0.24", extras = ["standard"]}
sqlalchemy = "^2.0"
psycopg2-binary = "^2.9"
pydantic = "^2.5"
celery = "^5.3"
redis = "^5.0"
python-dotenv = "^1.0"
# Existing runtime dependencies
pydantic-settings = "^2.1"
alembic = "^1.13"
asyncpg = "^0.29"
kubernetes = "^28.1"
docker = "^6.1"
httpx = "^0.25"
websockets = "^12.0"
langchain = "^0.1"
langchain-openai = "^0.0.5"
openai = "^1.3"
anthropic = "^0.8"
prometheus-client = "^0.19"
grafana-api = "^1.0.3"
boto3 = "^1.34"
azure-identity = "^1.15"
google-cloud-monitoring = "^2.16"
python-terraform = "^0.10.0"
ansible-runner = "^2.3.4"
pyyaml = "^6.0.1"
jinja2 = "^3.1"
croniter = "^2.0"
structlog = "^23.2"
rich = "^13.7"
typer = "^0.9"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4"
pytest-asyncio = "^0.21"
pytest-cov = "^4.1"
black = "^23.11"
isort = "^5.12"
flake8 = "^6.1"
pre-commit = "^3.6"
# additional dev tools
mypy = "^1.7"
httpx = "^0.25"
ruff = "^0.1"

[tool.poetry.urls]
Homepage = "https://github.com/your-org/devops-control-tower"
Documentation = "https://docs.devops-control-tower.com"
Repository = "https://github.com/your-org/devops-control-tower.git"
Issues = "https://github.com/your-org/devops-control-tower/issues"

[tool.poetry.scripts]
devops-tower = "devops_control_tower.cli:main"
tower-agent = "devops_control_tower.agents.cli:main"
serve = "devops_control_tower.main:app"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(\n  # directories\n  \.eggs\n  | \.git\n  | \.hg\n  | \.mypy_cache\n  | \.tox\n  | \.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "asyncio: enable asyncio tests"
]

[tool.coverage.run]
source = ["devops_control_tower"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
    "devops_control_tower/cli/*",
    "devops_control_tower/db/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
